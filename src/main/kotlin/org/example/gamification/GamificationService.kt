package org.example.gamification

import java.time.LocalDate
import java.time.LocalDateTime
import java.time.temporal.ChronoUnit

class GamificationService {
    private val userLives = mutableMapOf<Long, UserLives>()

    fun getUserLives(userId: Long): UserLives {
        return userLives.getOrPut(userId) { UserLives(userId) }
    }

    fun decrementLife(userId: Long): String {
        val user = getUserLives(userId)
        if (user.lives > 0) {
            user.lives--
            return when (user.lives) {
                0 -> "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –≤—Å–µ –∂–∏–∑–Ω–∏! –ù–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –Ω–æ–≤–∞—è –Ω–µ–¥–µ–ª—è - –Ω–æ–≤—ã–π —Å—Ç–∞—Ä—Ç! " +
                     "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ —Å–≤–æ–∏–º —Ü–µ–ª—è–º! üí™"
                1 -> "‚ö†Ô∏è –û—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è –∂–∏–∑–Ω—å! –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!"
                else -> "üíî –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –∂–∏–∑–Ω—å. –û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: ${user.lives}"
            }
        }
        return "–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏!"
    }

    fun resetLives(userId: Long) {
        val user = getUserLives(userId)
        user.lives = 3
        user.lastReset = LocalDateTime.now()
    }

    fun checkAndAwardAchievements(userId: Long) {
        val user = getUserLives(userId)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –∏–¥–µ–∞–ª—å–Ω—É—é –Ω–µ–¥–µ–ª—é
        if (user.lives == 3 && 
            ChronoUnit.DAYS.between(user.lastReset, LocalDateTime.now()) >= 7) {
            awardAchievement(userId, AchievementType.PERFECT_WEEK)
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
        if (user.lives == 3 && user.achievements.any { it.type == AchievementType.COMEBACK_KING }) {
            awardAchievement(userId, AchievementType.COMEBACK_KING)
        }
    }

    private fun awardAchievement(userId: Long, type: AchievementType) {
        val user = getUserLives(userId)
        if (user.achievements.none { it.type == type }) {
            user.achievements.add(Achievement(type))
        }
    }

    fun getAchievementsMessage(userId: Long): String {
        val user = getUserLives(userId)
        if (user.achievements.isEmpty()) {
            return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, –∏ –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤—è—Ç—Å—è! üåü"
        }

        return buildString {
            appendLine("üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:")
            user.achievements.forEach { achievement ->
                val emoji = when (achievement.type) {
                    AchievementType.PERFECT_WEEK -> "‚≠ê"
                    AchievementType.COMEBACK_KING -> "üëë"
                    AchievementType.PERSISTENT_USER -> "üéØ"
                    AchievementType.FIRST_WORKOUT -> "ü•á"
                }
                appendLine("$emoji ${achievement.type.name.replace('_', ' ')}")
            }
        }
    }

    fun markWorkoutCompleted(userId: Long): String {
        val user = getUserLives(userId)
        val today = LocalDate.now()
        if (user.lastWorkoutDate == today) {
            return "–°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! –ú–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –æ—Ç–º–µ—Ç–∫—É –≤ –¥–µ–Ω—å."
        }
        user.lastWorkoutDate = today
        user.lastWorkoutType = WorkoutType.COMPLETED
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        if (user.achievements.none { it.type.name == "FIRST_WORKOUT" }) {
            user.achievements.add(Achievement(AchievementType.FIRST_WORKOUT))
            return "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π! ü•á –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!"
        }
        return "–û—Ç–ª–∏—á–Ω–æ! –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
    }

    fun markWorkoutMissed(userId: Long): String {
        val user = getUserLives(userId)
        val today = LocalDate.now()
        if (user.lastWorkoutDate == today) {
            return "–°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! –ú–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –æ—Ç–º–µ—Ç–∫—É –≤ –¥–µ–Ω—å."
        }
        user.lastWorkoutDate = today
        user.lastWorkoutType = WorkoutType.MISSED
        if (user.lives > 0) {
            user.lives--
        }
        return when (user.lives) {
            0 -> "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –≤—Å–µ –∂–∏–∑–Ω–∏! –ù–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –Ω–æ–≤–∞—è –Ω–µ–¥–µ–ª—è - –Ω–æ–≤—ã–π —Å—Ç–∞—Ä—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ —Å–≤–æ–∏–º —Ü–µ–ª—è–º! üí™"
            1 -> "‚ö†Ô∏è –û—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è –∂–∏–∑–Ω—å! –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!"
            else -> "üíî –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –∂–∏–∑–Ω—å. –û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: ${user.lives}"
        }
    }
}
