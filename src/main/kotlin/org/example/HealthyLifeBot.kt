package org.example.org.example

import org.example.bot.handlers.*
import org.telegram.telegrambots.bots.TelegramLongPollingBot
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Update
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow
import org.example.OpenAIService
import org.example.gamification.GamificationService
import org.example.config.EnvironmentConfig
import org.example.service.DatabaseService
import org.example.service.Users

class HealthyLifeBot : TelegramLongPollingBot() {


    private val userProfiles = mutableMapOf<Long, UserProfile>()
    private val userStates = mutableMapOf<Long, UserState>()
    private val openAIService = OpenAIService(EnvironmentConfig.getRequiredProperty("OPENAI_API_KEY"))
    val gamificationService = GamificationService()
    private val savedWorkouts = mutableMapOf<Long, MutableList<String>>()
    private val lastAIWorkout = mutableMapOf<Long, String>()
    private val savedMeals = mutableMapOf<Long, MutableList<String>>()
    private val lastAIMeal = mutableMapOf<Long, String>()

    init {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        val allUsers = DatabaseService.getAllUsers()
        allUsers.forEach { row ->
            val chatId = row[Users.chatId]
            val name = row[Users.name]
            val age = row[Users.age]
            val weight = row[Users.weight]
            val height = row[Users.height]
            val goal = row[Users.goal]
            val state = row[Users.state]
            userProfiles[chatId] = UserProfile(
                name = name,
                age = age,
                weight = weight,
                height = height,
                goal = goal
            )
            userStates[chatId] = try { UserState.valueOf(state) } catch (e: Exception) { UserState.COMPLETED }
        }
    }

    fun getUserProfile(chatId: Long): UserProfile? = userProfiles[chatId]

    fun setUserState(chatId: Long, state: UserState) {
        userStates[chatId] = state
        DatabaseService.updateUserState(chatId, state.name)
    }

    override fun getBotUsername(): String = "HealthyLifeBot"
    override fun getBotToken(): String = EnvironmentConfig.getRequiredProperty("TELEGRAM_BOT_TOKEN")

    override fun onUpdateReceived(update: Update) {
        val message = update.message ?: return
        val chatId = message.chatId
        val text = message.text ?: return

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ø–∞–º—è—Ç–∏, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î
        if (!userProfiles.containsKey(chatId)) {
            val row = DatabaseService.getUser(chatId)
            if (row != null) {
                userProfiles[chatId] = UserProfile(
                    name = row[Users.name],
                    age = row[Users.age],
                    weight = row[Users.weight],
                    height = row[Users.height],
                    goal = row[Users.goal]
                )
                userStates[chatId] = try { UserState.valueOf(row[Users.state]) } catch (e: Exception) { UserState.COMPLETED }
            }
        }

        if (text == "/start") {
            val name = message.from?.firstName ?: "–¥—Ä—É–≥"
            userProfiles[chatId] = UserProfile(name = name)
            setUserState(chatId, UserState.AWAITING_AGE)

            val reply = SendMessage(chatId.toString(), "üëã –ü—Ä–∏–≤–µ—Ç, $name! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å —Ç–≤–æ–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞. –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
            execute(reply)
            return
        }

        val state = userStates[chatId]
        val profile = userProfiles[chatId]

        if (state != null && profile != null) {
            when (state) {
                UserState.AWAITING_AGE -> {
                    val age = text.toIntOrNull()
                    if (age != null && age in 10..100) {
                        profile.age = age
                        setUserState(chatId, UserState.AWAITING_HEIGHT)
                        execute(SendMessage(chatId.toString(), "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:"))
                    } else {
                        execute(SendMessage(chatId.toString(), "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 100 –ª–µ—Ç)."))
                    }
                }

                UserState.AWAITING_HEIGHT -> {
                    val height = text.toIntOrNull()
                    if (height != null && height in 100..250) {
                        profile.height = height
                        setUserState(chatId, UserState.AWAITING_WEIGHT)
                        execute(SendMessage(chatId.toString(), "–°–ø–∞—Å–∏–±–æ! –ê —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–µ—Å –≤ –∫–≥:"))
                    } else {
                        execute(SendMessage(chatId.toString(), "–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):"))
                    }
                }

                UserState.AWAITING_WEIGHT -> {
                    val weight = text.toIntOrNull()
                    if (weight != null && weight in 30..300) {
                        profile.weight = weight
                        setUserState(chatId, UserState.AWAITING_GOAL)
                        execute(SendMessage(chatId.toString(), """
                            –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å:
                            1. –ü–æ—Ö—É–¥–µ—Ç—å
                            2. –ù–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É
                            3. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É
                        """.trimIndent()))
                    } else {
                        execute(SendMessage(chatId.toString(), "–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70):"))
                    }
                }

                UserState.AWAITING_GOAL -> {
                    val goal = when (text.trim().lowercase()) {
                        "1", "–ø–æ—Ö—É–¥–µ—Ç—å" -> "–ü–æ—Ö—É–¥–µ—Ç—å"
                        "2", "–Ω–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É" -> "–ù–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É"
                        "3", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É" -> "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É"
                        else -> null
                    }

                    if (goal != null) {
                        profile.goal = goal
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
                        DatabaseService.addOrUpdateUser(
                            chatId = chatId,
                            name = profile.name,
                            age = profile.age ?: 0,
                            weight = profile.weight ?: 0,
                            height = profile.height ?: 0,
                            goal = profile.goal
                        )
                        setUserState(chatId, UserState.COMPLETED)
                        gamificationService.resetLives(chatId)
                        val lives = gamificationService.getUserLives(chatId)
                        val heartsDisplay = "‚ù§Ô∏è".repeat(lives.lives)
                        
                        val summary = """
                            üéâ –û—Ç–ª–∏—á–Ω–æ, –≤–æ—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
                            üë§ –ò–º—è: ${profile.name}
                            üìÖ –í–æ–∑—Ä–∞—Å—Ç: ${profile.age}
                            üìè –†–æ—Å—Ç: ${profile.height} —Å–º
                            ‚öñÔ∏è –í–µ—Å: ${profile.weight} –∫–≥
                            üéØ –¶–µ–ª—å: ${profile.goal}
                            ‚ù§Ô∏è –ñ–∏–∑–Ω–∏: $heartsDisplay
                            
                            üéÆ –°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
                            ‚Ä¢ –£ —Ç–µ–±—è –µ—Å—Ç—å 3 –∂–∏–∑–Ω–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é
                            ‚Ä¢ –ü—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ = -1 –∂–∏–∑–Ω—å
                            ‚Ä¢ –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"
                            
                            –£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π! üí™
                        """.trimIndent()

                        val response = SendMessage(chatId.toString(), summary)
                        response.replyMarkup = createMainMenu()
                        execute(response)
                    } else {
                        execute(SendMessage(chatId.toString(), "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ü–µ–ª–µ–π (1, 2 –∏–ª–∏ 3):"))
                    }
                }

                UserState.COMPLETED -> {
                    handleUserInput(chatId, text)
                }

                UserState.AI_ASSISTANT -> {
                    val profile = userProfiles[chatId]
                    if (text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é") {
                        setUserState(chatId, UserState.COMPLETED)
                        val response = SendMessage(chatId.toString(), "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                        response.replyMarkup = createMainMenu()
                        execute(response)
                    } else {
                        // –§–æ—Ä–º–∏—Ä—É–µ–º prompt —Å —É—á—ë—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        val userInfo = if (profile != null) {
                            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${profile.name}, –≤–æ–∑—Ä–∞—Å—Ç: ${profile.age ?: "–Ω–µ —É–∫–∞–∑–∞–Ω"}, —Ä–æ—Å—Ç: ${profile.height ?: "–Ω–µ —É–∫–∞–∑–∞–Ω"} —Å–º, –≤–µ—Å: ${profile.weight ?: "–Ω–µ —É–∫–∞–∑–∞–Ω"} –∫–≥, —Ü–µ–ª—å: ${profile.goal.ifBlank { "–Ω–µ —É–∫–∞–∑–∞–Ω–∞" }}."
                        } else {
                            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å."
                        }
                        val prompt = "$userInfo –í–æ–ø—Ä–æ—Å: $text"
                        val aiResponse = openAIService.generateResponse(prompt)
                        // –û–±—Ä–µ–∑–∞–µ–º –æ—Ç–≤–µ—Ç –¥–æ 3900 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ Telegram –Ω–µ –æ–±—Ä–µ–∂–µ—Ç
                        val safeResponse = if (aiResponse.length > 3900) aiResponse.substring(0, 3900) else aiResponse
                        val response = SendMessage(chatId.toString(), safeResponse)
                        val keyboard = ReplyKeyboardMarkup()
                        keyboard.resizeKeyboard = true
                        keyboard.keyboard = listOf(
                            KeyboardRow(listOf(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")))
                        )
                        response.replyMarkup = keyboard
                        execute(response)
                    }
                }

                UserState.SETTINGS_AGE -> {
                    val age = text.toIntOrNull()
                    if (age != null && age in 10..100) {
                        profile.age = age
                        setUserState(chatId, UserState.COMPLETED)
                        val handler = SettingsHandler(this)
                        handler.handle(chatId)
                    } else {
                        execute(SendMessage(chatId.toString(), "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 100 –ª–µ—Ç)."))
                    }
                }

                UserState.SETTINGS_HEIGHT -> {
                    val height = text.toIntOrNull()
                    if (height != null && height in 100..250) {
                        profile.height = height
                        setUserState(chatId, UserState.COMPLETED)
                        val handler = SettingsHandler(this)
                        handler.handle(chatId)
                    } else {
                        execute(SendMessage(chatId.toString(), "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 100 –¥–æ 250 —Å–º)."))
                    }
                }

                UserState.SETTINGS_WEIGHT -> {
                    val weight = text.toIntOrNull()
                    if (weight != null && weight in 30..300) {
                        profile.weight = weight
                        setUserState(chatId, UserState.COMPLETED)
                        val handler = SettingsHandler(this)
                        handler.handle(chatId)
                    } else {
                        execute(SendMessage(chatId.toString(), "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 300 –∫–≥)."))
                    }
                }

                UserState.SETTINGS_GOAL -> {
                    val goal = when (text.trim()) {
                        "1. –ü–æ—Ö—É–¥–µ—Ç—å", "1", "–ü–æ—Ö—É–¥–µ—Ç—å" -> "–ü–æ—Ö—É–¥–µ—Ç—å"
                        "2. –ù–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É", "2", "–ù–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É" -> "–ù–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É"
                        "3. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É", "3", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É" -> "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É"
                        else -> null
                    }

                    if (goal != null) {
                        profile.goal = goal
                        setUserState(chatId, UserState.COMPLETED)
                        val handler = SettingsHandler(this)
                        handler.handle(chatId)
                    } else {
                        execute(SendMessage(chatId.toString(), "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π."))
                    }
                }
                UserState.PROGRESS_MENU -> {
                    when (text.trim()) {
                        "‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª —Å–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" -> {
                            val result = gamificationService.markWorkoutCompleted(chatId)
                            execute(SendMessage(chatId.toString(), result))
                            val handler = org.example.bot.handlers.ProgressHandler(this)
                            handler.handle(chatId)
                            return
                        }
                        "‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" -> {
                            val result = gamificationService.markWorkoutMissed(chatId)
                            execute(SendMessage(chatId.toString(), result))
                            val handler = org.example.bot.handlers.ProgressHandler(this)
                            handler.handle(chatId)
                            return
                        }
                        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" -> {
                            setUserState(chatId, UserState.COMPLETED)
                            val response = SendMessage(chatId.toString(), "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
                            response.replyMarkup = createMainMenu()
                            execute(response)
                            return
                        }
                        else -> {
                            execute(SendMessage(chatId.toString(), "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ."))
                            return
                        }
                    }
                }

                else -> {
                    handleUserInput(chatId, text)
                }
            }
            return
        }

        handleUserInput(chatId, text)
    }

    private fun handleUserInput(chatId: Long, text: String) {
        val profile = userProfiles[chatId]

        if (profile?.goal != null) {
            when (text) {
                "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" -> {
                    val response = SendMessage(chatId.toString(), "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
                    response.replyMarkup = createTrainingMenu()
                    execute(response)
                }
                "–ö–∞—Ä–¥–∏–æ", "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–†–∞—Å—Ç—è–∂–∫–∞" -> {
                    val handler = TrainingHandler(this)
                    handler.handleTrainingSelection(chatId, text)
                }
                "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" -> {
                    val workouts = savedWorkouts[chatId]
                    val msg = if (workouts.isNullOrEmpty()) "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫." else workouts.joinToString("\n\n")
                    execute(SendMessage(chatId.toString(), msg))
                }
                "üçï –ü–∏—Ç–∞–Ω–∏–µ" -> {
                    val response = SendMessage(chatId.toString(), "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                    response.replyMarkup = createNutritionMenu()
                    execute(response)
                }
                "–ü—Ä–∏–º–µ—Ä –ø–∏—Ç–∞–Ω–∏—è" -> {
                    val handler = NutritionHandler(this)
                    handler.handle(chatId)
                }
                "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ" -> {
                    val meals = savedMeals[chatId]
                    val msg = if (meals.isNullOrEmpty()) "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è." else meals.joinToString("\n\n")
                    execute(SendMessage(chatId.toString(), msg))
                }
                "ü§ñ –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç" -> {
                    val aiWelcome = """
                        ü§ñ –Ø –≤–∞—à –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏!
                        –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ:
                        - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
                        - –ø–∏—Ç–∞–Ω–∏–∏
                        - –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏
                        
                        –ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ —Ä–∞–∑–¥–µ–ª "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏".
                        –ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è", —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ".
                        
                        –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
                        
                        –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!
                    """.trimIndent()
                    val response = SendMessage(chatId.toString(), aiWelcome)
                    response.replyMarkup = createAIAssistantMenu()
                    execute(response)
                }
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" -> {
                    val last = lastAIWorkout[chatId]
                    if (last != null) {
                        savedWorkouts.getOrPut(chatId) { mutableListOf() }.add(last)
                        execute(SendMessage(chatId.toString(), "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"))
                    } else {
                        execute(SendMessage(chatId.toString(), "–ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."))
                    }
                }
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è" -> {
                    val last = lastAIMeal[chatId]
                    if (last != null) {
                        savedMeals.getOrPut(chatId) { mutableListOf() }.add(last)
                        execute(SendMessage(chatId.toString(), "–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω!"))
                    } else {
                        execute(SendMessage(chatId.toString(), "–ù–µ—Ç –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."))
                    }
                }
                "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å" -> {
                    val handler = ProgressHandler(this)
                    handler.handle(chatId)
                }
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" -> {
                    val handler = SettingsHandler(this)
                    handler.handle(chatId)
                }
                "–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ—Å—Ç", "–ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å", "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å" -> {
                    val handler = SettingsHandler(this)
                    handler.handleSettingChange(chatId, text)
                }
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" -> {
                    val handler = SettingsHandler(this)
                    handler.handle(chatId)
                }
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" -> {
                    val response = SendMessage(chatId.toString(), "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
                    response.replyMarkup = createMainMenu()
                    execute(response)
                }
                else -> {
                    val aiResponse = openAIService.generateResponse(text)
                    lastAIWorkout[chatId] = aiResponse
                    lastAIMeal[chatId] = aiResponse
                    val parts = aiResponse.chunked(4096)
                    for (part in parts) {
                        val response = SendMessage(chatId.toString(), part)
                        response.replyMarkup = createAIAssistantMenu()
                        execute(response)
                    }
                }
            }
        } else {
            execute(SendMessage(chatId.toString(), "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è!"))
        }
    }

    private fun createMainMenu(): ReplyKeyboardMarkup {
        val keyboard = ReplyKeyboardMarkup()
        keyboard.resizeKeyboard = true
        keyboard.keyboard = listOf(
            KeyboardRow().apply {
                add(KeyboardButton("üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"))
                add(KeyboardButton("üçï –ü–∏—Ç–∞–Ω–∏–µ"))
            },
            KeyboardRow().apply {
                add(KeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"))
                add(KeyboardButton("ü§ñ –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"))
            },
            KeyboardRow().apply {
                add(KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
            }
        )
        return keyboard
    }

    private fun createTrainingMenu(): ReplyKeyboardMarkup {
        val keyboard = ReplyKeyboardMarkup()
        keyboard.resizeKeyboard = true
        keyboard.keyboard = listOf(
            KeyboardRow().apply {
                add(KeyboardButton("–ö–∞—Ä–¥–∏–æ"))
                add(KeyboardButton("–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"))
                add(KeyboardButton("–†–∞—Å—Ç—è–∂–∫–∞"))
            },
            KeyboardRow().apply {
                add(KeyboardButton("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"))
                add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
            }
        )
        return keyboard
    }

    private fun createNutritionMenu(): ReplyKeyboardMarkup {
        val keyboard = ReplyKeyboardMarkup()
        keyboard.resizeKeyboard = true
        keyboard.keyboard = listOf(
            KeyboardRow().apply {
                add(KeyboardButton("–ü—Ä–∏–º–µ—Ä –ø–∏—Ç–∞–Ω–∏—è"))
                add(KeyboardButton("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ"))
            },
            KeyboardRow().apply {
                add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
            }
        )
        return keyboard
    }

    private fun createAIAssistantMenu(): ReplyKeyboardMarkup {
        val keyboard = ReplyKeyboardMarkup()
        keyboard.resizeKeyboard = true
        keyboard.keyboard = listOf(
            KeyboardRow().apply {
                add(KeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"))
                add(KeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"))
                add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
            }
        )
        return keyboard
    }

    private fun handleAIAssistant(chatId: Long, profile: UserProfile) {
        setUserState(chatId, UserState.AI_ASSISTANT)
        val message = """
            ü§ñ –Ø –≤–∞—à –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏! 
            –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ:
            - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
            - –ø–∏—Ç–∞–Ω–∏–∏
            - –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏
            
            –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
            
            –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!
        """.trimIndent()
        val response = SendMessage(chatId.toString(), message)
        
        val keyboard = ReplyKeyboardMarkup()
        keyboard.resizeKeyboard = true
        keyboard.keyboard = listOf(
            KeyboardRow(listOf(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")))
        )
        response.replyMarkup = keyboard
        execute(response)
    }

    private fun showProfile(chatId: Long) {
        val profile = userProfiles[chatId] ?: return
        val lives = gamificationService.getUserLives(chatId)
        val heartsDisplay = "‚ù§Ô∏è".repeat(lives.lives)
        
        val message = """
            üìä –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
            üë§ –ò–º—è: ${profile.name}
            üìÖ –í–æ–∑—Ä–∞—Å—Ç: ${profile.age}
            üìè –†–æ—Å—Ç: ${profile.height} —Å–º
            ‚öñÔ∏è –í–µ—Å: ${profile.weight} –∫–≥
            üéØ –¶–µ–ª—å: ${profile.goal}
            ‚ù§Ô∏è –ñ–∏–∑–Ω–∏: $heartsDisplay
        """.trimIndent()
        
        execute(SendMessage(chatId.toString(), message))
    }
}
