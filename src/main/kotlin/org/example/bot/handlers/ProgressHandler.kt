package org.example.bot.handlers

import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow
import org.example.gamification.AchievementType
import org.example.gamification.Achievement
import org.example.gamification.UserLives
import org.example.org.example.HealthyLifeBot
import org.example.org.example.UserProfile
import org.example.org.example.UserState

class ProgressHandler(private val bot: HealthyLifeBot) {
    fun handle(chatId: Long) {
        bot.setUserState(chatId, org.example.org.example.UserState.PROGRESS_MENU)
        val profile = bot.getUserProfile(chatId)
        if (profile == null) {
            bot.execute(SendMessage(chatId.toString(), "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å!"))
            return
        }

        val lives = bot.gamificationService.getUserLives(chatId)
        val heartsDisplay = "‚ù§Ô∏è".repeat(lives.lives)
        
        val message = buildString {
            appendLine("üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:")
            appendLine()
            appendLine("üë§ –ü—Ä–æ—Ñ–∏–ª—å:")
            appendLine("–ò–º—è: ${profile.name}")
            appendLine("–í–æ–∑—Ä–∞—Å—Ç: ${profile.age}")
            appendLine("–†–æ—Å—Ç: ${profile.height} —Å–º")
            appendLine("–í–µ—Å: ${profile.weight} –∫–≥")
            appendLine("–¶–µ–ª—å: ${profile.goal}")
            appendLine()
            appendLine("‚ù§Ô∏è –ñ–∏–∑–Ω–∏: $heartsDisplay")
            appendLine()
            appendLine("\uD83D\uDC9B –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
            appendLine("- –£ –≤–∞—Å –µ—Å—Ç—å 3 –∂–∏–∑–Ω–∏ (—Å–µ—Ä–¥—Ü–∞).\n- –ö–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –≤—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —Ç–µ—Ä—è–µ—Ç–µ 1 –∂–∏–∑–Ω—å.\n- –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ‚Äî –∂–∏–∑–Ω–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.\n- –ö–æ–≥–¥–∞ –∂–∏–∑–Ω–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, –Ω–æ–≤–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –Ω–æ–≤—ã–π —à–∞–Ω—Å!\n- –ó–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.")
            if (lives.achievements.isNotEmpty()) {
                appendLine()
                appendLine("\uD83C\uDFC6 –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:")
                for (achievement in lives.achievements) {
                    val emoji = when (achievement.type) {
                        AchievementType.PERFECT_WEEK -> "‚≠ê"
                        AchievementType.COMEBACK_KING -> "üëë"
                        AchievementType.PERSISTENT_USER -> "üéØ"
                        else -> "üèÜ"
                    }
                    val achievementName = achievement.type.toString()
                        .replace('_', ' ')
                        .lowercase()
                        .replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }
                    appendLine("$emoji $achievementName")
                }
            }
        }

        val response = SendMessage(chatId.toString(), message)
        response.replyMarkup = createProgressMenu()
        bot.execute(response)
    }

    private fun createProgressMenu(): ReplyKeyboardMarkup {
        val keyboard = ReplyKeyboardMarkup()
        keyboard.resizeKeyboard = true
        keyboard.keyboard = listOf(
            KeyboardRow().apply {
                add(KeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª —Å–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"))
                add(KeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"))
            },
            KeyboardRow().apply {
                add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
            }
        )
        return keyboard
    }
}
